---
description: 
globs: 
alwaysApply: false
---
# ‚≠ê COMPREHENSIVE TASK EXECUTION COMPLETION CRITERIA - ZERO TOLERANCE

**Authority Level**: üî¥ SUPREME - Task completion foundation for all projects
**Enforcement Status**: üîí ACTIVE AND ENFORCING - ZERO TOLERANCE FOR INCOMPLETE WORK
**Scope**: Universal task completion requirements across all development activities

## üö® UNIVERSAL COMPLETION REQUIREMENTS (NON-NEGOTIABLE)

### **Core Completion Principles**
- **NO ATTEMPT LIMITS**: Every error must be systematically corrected until resolved - no 2-3 attempt limitations
- **MANDATORY ERROR RESOLUTION**: All linting, compilation, and runtime errors must be resolved before task completion
- **SUCCESSFUL BUILD REQUIREMENT**: Task completion requires successful build execution without errors
- **BUILD VERIFICATION PROTOCOL**: Every task must pass build validation before being marked as complete
- **CONTINUOUS ERROR CORRECTION**: Iterate on error correction until all issues are resolved, regardless of attempt count
- **QUALITY GATE ENFORCEMENT**: No task can be considered complete with outstanding errors, warnings, or failures

## üèóÔ∏è MANDATORY BUILD VALIDATION SEQUENCE

### **Universal Build Commands (Framework Agnostic)**
```bash
# Required execution sequence before task completion
npm run lint              # Must pass with zero warnings
npm run type-check         # Type compilation must succeed
npm run test              # All tests must pass
npm run test:coverage     # Coverage thresholds must be met
npm run build             # Build must complete without errors

# Alternative commands for different frameworks
yarn lint && yarn type-check && yarn test && yarn build
pnpm lint && pnpm type-check && pnpm test && pnpm build
composer install && vendor/bin/phpunit && composer build
pytest && flake8 && mypy && python setup.py build
mvn clean test compile package
gradle clean test build
```

### **Framework-Specific Build Validation**

#### **Node.js/TypeScript Projects**
```bash
# Validation sequence
npm run lint:fix          # Fix auto-fixable issues
npm run type-check        # TypeScript compilation
npm run test:unit         # Unit tests
npm run test:integration  # Integration tests
npm run build:production  # Production build
```

#### **Python Projects**
```bash
# Validation sequence
black . --check           # Code formatting
flake8                    # Linting
mypy .                    # Type checking
pytest --cov=src --cov-report=term-missing  # Tests with coverage
python -m build           # Package build
```

#### **Java Projects**
```bash
# Validation sequence
mvn spotless:check        # Code formatting
mvn checkstyle:check      # Code style
mvn test                  # Unit and integration tests
mvn compile               # Compilation
mvn package               # Package creation
```

## üìã TASK COMPLETION CHECKLIST (MANDATORY)

### **Code Quality Validation**
- [ ] **Linting**: All linting rules pass without warnings
- [ ] **Type Safety**: Type compilation succeeds without errors
- [ ] **Test Coverage**: Minimum coverage thresholds maintained
- [ ] **Build Success**: Production build completes without errors
- [ ] **Performance**: No performance regressions introduced

### **Documentation Validation**
- [ ] **Code Documentation**: All new code appropriately documented
- [ ] **API Documentation**: Public interfaces documented with examples
- [ ] **README Updates**: Project documentation reflects changes
- [ ] **Changelog**: Changes documented in appropriate format

### **Quality Assurance**
- [ ] **Security Scan**: No new security vulnerabilities
- [ ] **Dependency Check**: All dependencies properly managed
- [ ] **Environment Compatibility**: Works across target environments
- [ ] **Browser/Platform Compatibility**: Cross-platform validation

### **Integration Validation**
- [ ] **Database Migrations**: Schema changes properly applied
- [ ] **API Compatibility**: No breaking changes to public APIs
- [ ] **Configuration**: Environment configurations updated
- [ ] **Deployment Readiness**: Ready for deployment pipeline

## üîÑ ERROR RESOLUTION ESCALATION

### **Level 1: Standard Error Correction**
- Systematic debugging with comprehensive error analysis
- Applied best practices and established patterns
- Consulted existing documentation and lessons learned
- Implemented proven solutions from similar contexts

### **Level 2: Enhanced Debugging**
- Deep-dive error analysis with root cause investigation
- Cross-reference with project history and known issues
- Applied advanced debugging techniques and tools
- Consulted external resources and documentation

### **Level 3: Architecture Review**
- Fundamental approach assessment and validation
- Alternative implementation strategy evaluation
- Technical debt assessment and refactoring consideration
- Architectural pattern validation and optimization

### **Level 4: Complete Reimplementation**
- Clean slate approach with lessons learned integration
- Alternative technology or framework consideration
- Comprehensive testing strategy redesign
- Full validation of new approach against requirements

## üéØ PRODUCTION READINESS CRITERIA

### **Deployment Validation Commands**
```bash
# Production readiness validation
npm run test:e2e          # End-to-end tests
npm run security:scan     # Security vulnerability scan
npm run performance:test  # Performance benchmarks
npm run build:production  # Production build validation
npm run deploy:staging    # Staging deployment test
```

### **Quality Metrics Thresholds**
| Metric | Minimum Threshold | Action if Below |
|-----|---|-----|
| **Test Coverage** | 95% | Add missing tests |
| **Code Quality** | A grade | Refactor problematic code |
| **Performance** | Baseline ¬±5% | Optimize performance |
| **Security Score** | 100% (no critical) | Fix security issues |
| **Documentation** | 90% coverage | Add missing documentation |

## üìä COMPLETION DOCUMENTATION REQUIREMENTS

### **Mandatory Completion Summary**
```markdown
## Task Completion Summary
**Status**: ‚úÖ COMPLETED  
**Build Validation**: ‚úÖ PASSED  
**Test Coverage**: ‚úÖ 98.2% (Exceeds 95% requirement)  
**Linter Status**: ‚úÖ ZERO WARNINGS  
**Type Safety**: ‚úÖ ZERO COMPILATION ERRORS  
**Deployment Ready**: ‚úÖ PRODUCTION READY  

### Completion Metrics
- Build Time: 2m 15s
- Bundle Size Impact: +12KB (within limits)
- Tests Added: 47 tests (100% passing)
- Documentation: Progressive disclosure updated
- Lessons Generated: 2 new lessons documented

### Quality Verification
All mandatory completion criteria verified and documented.
Zero outstanding errors, warnings, or technical debt introduced.
```

### **Required Artifacts**
- **Test Reports**: Comprehensive test execution results
- **Build Logs**: Complete build process documentation
- **Coverage Reports**: Detailed coverage analysis with trends
- **Performance Metrics**: Before/after performance comparison
- **Security Scan Results**: Vulnerability assessment outcomes

## ‚öñÔ∏è VIOLATION CONSEQUENCES

### **Task Status Management**
- **Incomplete Task Status**: Tasks with outstanding errors cannot be marked as complete
- **Quality Gate Failure**: Build errors or linter warnings trigger automatic task status reset
- **Systematic Review**: Multiple error correction cycles trigger approach reassessment
- **Architecture Escalation**: Persistent errors require fundamental solution review

### **Process Enforcement**
- **Immediate Correction**: All violations require immediate attention
- **Documentation Required**: All error resolution steps must be documented
- **Lesson Generation**: Failed attempts must generate lessons learned
- **Pattern Recognition**: Recurring issues trigger systematic prevention measures

## üöÄ FRAMEWORK-SPECIFIC COMPLETION PATTERNS

### **React/Next.js Projects**
```bash
# Completion validation
npm run lint              # ESLint validation
npm run type-check        # TypeScript validation
npm run test              # Jest/React Testing Library
npm run test:e2e          # Playwright/Cypress tests
npm run build             # Next.js production build
npm run start             # Production server validation
```

### **Vue.js Projects**
```bash
# Completion validation
npm run lint              # ESLint + Vue linting
npm run type-check        # Vue TypeScript validation
npm run test:unit         # Vue Test Utils + Jest
npm run test:e2e          # Cypress tests
npm run build             # Vite/Webpack production build
```

### **Python Django/FastAPI**
```bash
# Completion validation
black . && isort .        # Code formatting
flake8 && mypy .          # Linting and type checking
pytest --cov=. --cov-report=html  # Tests with coverage
python manage.py check    # Django system checks
python manage.py collectstatic --dry-run  # Static files
```

### **Microservices/API Projects**
```bash
# Completion validation
npm run lint && npm run test  # Standard validation
npm run test:integration      # API integration tests
npm run test:contract         # Contract testing
npm run docker:build          # Container build validation
npm run security:scan         # Container security scan
```

## üìà CONTINUOUS IMPROVEMENT

### **Performance Tracking**
- **Build Time Trends**: Monitor and optimize build performance
- **Test Execution Time**: Track and improve test suite efficiency
- **Error Resolution Time**: Measure and reduce debugging cycles
- **Quality Metrics Evolution**: Track improvements over time

### **Process Optimization**
- **Automated Quality Gates**: Implement automatic validation
- **Template Creation**: Develop reusable completion templates
- **Tool Integration**: Streamline validation tool chains
- **Knowledge Sharing**: Document and share completion patterns

---

**AUTHORITY LEVEL**: üî¥ **SUPREME AUTHORITY - TASK COMPLETION FOUNDATION**  
**ENFORCEMENT STATUS**: üîí **ACTIVE AND ENFORCING - ZERO TOLERANCE FOR INCOMPLETE WORK**  
**SCOPE**: Universal application across all development tasks, frameworks, and project types
