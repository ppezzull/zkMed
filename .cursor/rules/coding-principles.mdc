---
description: 
globs: 
alwaysApply: false
---
# üèóÔ∏è COMPREHENSIVE CODING PRINCIPLES - ARCHITECTURAL FOUNDATION

**Authority Level**: üî¥ SUPREME - Architectural foundation for all development
**Enforcement Status**: üîí ACTIVE AND ENFORCING - ZERO COMPROMISE
**Scope**: Universal principles across all programming languages and frameworks

## üß± SOLID PRINCIPLES (MANDATORY IMPLEMENTATION)

### **S - SINGLE RESPONSIBILITY PRINCIPLE**
Each class should have only one reason to change.

```typescript
// ‚ùå PROHIBITED - Multiple responsibilities
class UserManager {
  createUser() { /* user creation */ }
  sendEmail() { /* email logic */ }
  validateData() { /* validation logic */ }
  generateReport() { /* reporting logic */ }
}

// ‚úÖ MANDATORY - Single responsibility
class UserService { 
  createUser() { /* only user creation */ } 
}
class EmailService { 
  sendEmail() { /* only email logic */ } 
}
class ValidationService { 
  validateData() { /* only validation logic */ } 
}
class ReportingService { 
  generateReport() { /* only reporting logic */ } 
}
```

### **O - OPEN/CLOSED PRINCIPLE**
Open for extension, closed for modification.

```typescript
// ‚úÖ MANDATORY - Extensible design
interface NotificationStrategy {
  send(message: string): Promise<void>;
}

class EmailNotification implements NotificationStrategy {
  async send(message: string): Promise<void> {
    // Email implementation
  }
}

class SMSNotification implements NotificationStrategy {
  async send(message: string): Promise<void> {
    // SMS implementation
  }
}

// New notification types can be added without modifying existing code
```

### **L - LISKOV SUBSTITUTION PRINCIPLE**
Subclasses must be substitutable for their base classes.

```typescript
// ‚úÖ MANDATORY - Proper inheritance
abstract class Shape {
  abstract area(): number;
  abstract perimeter(): number;
}

class Rectangle extends Shape {
  constructor(private width: number, private height: number) { super(); }
  
  area(): number { return this.width * this.height; }
  perimeter(): number { return 2 * (this.width + this.height); }
}

class Circle extends Shape {
  constructor(private radius: number) { super(); }
  
  area(): number { return Math.PI * this.radius ** 2; }
  perimeter(): number { return 2 * Math.PI * this.radius; }
}

// Any Shape can be used interchangeably
function calculateTotalArea(shapes: Shape[]): number {
  return shapes.reduce((total, shape) => total + shape.area(), 0);
}
```

### **I - INTERFACE SEGREGATION PRINCIPLE**
Clients shouldn't depend on interfaces they don't use.

```typescript
// ‚ùå PROHIBITED - Fat interfaces
interface Worker {
  work(): void;
  eat(): void;
  sleep(): void;
}

// ‚úÖ MANDATORY - Segregated interfaces
interface Workable { 
  work(): void; 
}
interface Eatable { 
  eat(): void; 
}
interface Sleepable { 
  sleep(): void; 
}

// Implementations only depend on what they need
class Developer implements Workable, Eatable {
  work(): void { /* coding */ }
  eat(): void { /* eating */ }
}

class Robot implements Workable {
  work(): void { /* automated tasks */ }
}
```

### **D - DEPENDENCY INVERSION PRINCIPLE**
Depend on abstractions, not concretions.

```typescript
// ‚úÖ MANDATORY - Dependency injection
interface DatabaseRepository {
  save(data: any): Promise<void>;
  findById(id: string): Promise<any>;
}

interface EmailProvider {
  sendEmail(to: string, subject: string, body: string): Promise<void>;
}

class UserService {
  constructor(
    private database: DatabaseRepository,
    private emailProvider: EmailProvider
  ) {}
  
  async createUser(userData: any): Promise<void> {
    await this.database.save(userData);
    await this.emailProvider.sendEmail(
      userData.email, 
      'Welcome!', 
      'Welcome to our platform'
    );
  }
}
```

## üéØ ADDITIONAL CORE PRINCIPLES (MANDATORY)

### **DRY - Don't Repeat Yourself**
Single source of truth for all logic.

```typescript
// ‚ùå PROHIBITED - Code duplication
function formatUserName(user: User): string {
  return `${user.firstName} ${user.lastName}`.trim();
}
function formatAuthorName(author: Author): string {
  return `${author.firstName} ${author.lastName}`.trim();
}

// ‚úÖ MANDATORY - Single source of truth
function formatFullName(firstName: string, lastName: string): string {
  return `${firstName} ${lastName}`.trim();
}

const formatUserName = (user: User) => formatFullName(user.firstName, user.lastName);
const formatAuthorName = (author: Author) => formatFullName(author.firstName, author.lastName);
```

### **KISS - Keep It Simple, Stupid**
Simplicity over complexity.

```typescript
// ‚ùå PROHIBITED - Overly complex
function calculateDiscount(user: any): number {
  return user.membershipLevel === 'premium' ? 
    (user.purchaseAmount > 1000 ? 
      (user.isFirstTime ? 0.25 : 0.20) : 
      (user.isFirstTime ? 0.15 : 0.10)) : 
    (user.purchaseAmount > 500 ? 0.05 : 0.02);
}

// ‚úÖ MANDATORY - Simple and clear
function calculateDiscount(user: User): number {
  if (user.membershipLevel !== 'premium') {
    return user.purchaseAmount > 500 ? 0.05 : 0.02;
  }
  
  const baseDiscount = user.purchaseAmount > 1000 ? 0.20 : 0.10;
  const firstTimeBonus = user.isFirstTime ? 0.05 : 0;
  
  return baseDiscount + firstTimeBonus;
}
```

### **YAGNI - You Aren't Gonna Need It**
Don't implement features until they're actually needed.

```typescript
// ‚ùå PROHIBITED - Premature features
interface User {
  id: string;
  name: string;
  email: string;
  // Future features we might need someday
  socialSecurityNumber?: string;
  creditScore?: number;
  favoriteColor?: string;
  petNames?: string[];
  mothersMaidenName?: string;
}

// ‚úÖ MANDATORY - Only current requirements
interface User {
  id: string;
  name: string;
  email: string;
}

// Add fields only when actually needed
```

## üèóÔ∏è COMPONENT ARCHITECTURE (FRAMEWORK-AGNOSTIC)

### **Atomic Design Classification**
- ‚úÖ **Atoms**: Basic elements (‚â§50 lines each)
- ‚úÖ **Molecules**: Combined atoms (‚â§100 lines each)
- ‚úÖ **Organisms**: Complex components (‚â§150 lines each)
- ‚úÖ **Templates**: Layout patterns (‚â§200 lines each)

### **Universal Component Rules**
1. **üö® Single Responsibility** - One component, one purpose
2. **üö® Co-location** - Keep related files together
3. **üö® Strong Typing** - Use type systems (TypeScript, PropTypes, etc.)
4. **üö® Named Exports** - Prefer named over default exports
5. **üö® Composition over Inheritance** - Favor composition patterns

### **React/Vue/Svelte Example**
```typescript
// ‚úÖ MANDATORY - Focused component with single responsibility
interface UserProfileProps {
  user: User;
  onUpdateProfile: (updates: Partial<User>) => void;
}

const UserProfile: React.FC<UserProfileProps> = ({ user, onUpdateProfile }) => {
  // Single responsibility: Display and edit user profile
  return (
    <ProfileContainer>
      <Avatar src={user.avatar} alt={user.name} />
      <ProfileDetails user={user} onUpdate={onUpdateProfile} />
    </ProfileContainer>
  );
};

// Export with clear naming
export { UserProfile };
```

## üìä CODE QUALITY METRICS (ENFORCED)

### **Complexity Thresholds**
| Metric | Threshold | Action Required |
|-----|-----|-----|
| **Cyclomatic Complexity** | ‚â§ 5 | Excellent |
| **Function Parameters** | ‚â§ 3 | Use objects for more |
| **Nesting Depth** | ‚â§ 3 | Use guard clauses |
| **Function Length** | ‚â§ 30 lines | Extract methods |
| **Class/Module Size** | ‚â§ 200 lines | Split responsibilities |

### **Automated Enforcement**
```json
// Universal linting rules
{
  "rules": {
    "complexity": ["error", 5],
    "max-params": ["error", 3],
    "max-depth": ["error", 3],
    "max-lines-per-function": ["error", 30],
    "max-classes-per-file": ["error", 1]
  }
}
```

## üîÑ DESIGN PATTERNS (RECOMMENDED)

### **Creational Patterns**
```typescript
// Factory Pattern for object creation
interface User {
  id: string;
  name: string;
  role: UserRole;
}

class UserFactory {
  static createAdmin(name: string): User {
    return {
      id: generateId(),
      name,
      role: 'admin'
    };
  }
  
  static createStandardUser(name: string): User {
    return {
      id: generateId(),
      name,
      role: 'user'
    };
  }
}
```

### **Behavioral Patterns**
```typescript
// Observer Pattern for event handling
interface Observer {
  update(data: any): void;
}

class EventBus {
  private observers: Map<string, Observer[]> = new Map();
  
  subscribe(event: string, observer: Observer): void {
    if (!this.observers.has(event)) {
      this.observers.set(event, []);
    }
    this.observers.get(event)!.push(observer);
  }
  
  notify(event: string, data: any): void {
    const observers = this.observers.get(event) || [];
    observers.forEach(observer => observer.update(data));
  }
}
```

### **Structural Patterns**
```typescript
// Adapter Pattern for third-party integration
interface PaymentProvider {
  processPayment(amount: number): Promise<PaymentResult>;
}

class StripeAdapter implements PaymentProvider {
  constructor(private stripeClient: any) {}
  
  async processPayment(amount: number): Promise<PaymentResult> {
    const stripeResult = await this.stripeClient.charges.create({
      amount: amount * 100, // Stripe uses cents
      currency: 'usd'
    });
    
    return {
      success: stripeResult.status === 'succeeded',
      transactionId: stripeResult.id
    };
  }
}
```

## ‚öñÔ∏è ENFORCEMENT MECHANISMS

### **Code Review Checklist**
- [ ] SOLID principles followed
- [ ] DRY principle applied
- [ ] KISS principle maintained
- [ ] YAGNI principle respected
- [ ] Complexity within thresholds
- [ ] Proper separation of concerns
- [ ] Appropriate design patterns used

### **Automated Quality Gates**
```bash
# Pre-commit validation
npm run lint:principles    # Principle violation detection
npm run analyze:complexity # Complexity analysis
npm run test:architecture  # Architecture testing
npm run validate:patterns  # Design pattern validation
```

## üéØ SUCCESS METRICS

### **Code Quality Indicators**
- **Maintainability Index**: > 85
- **Technical Debt Ratio**: < 5%
- **Code Duplication**: < 3%
- **Test Coverage**: > 95%
- **Documentation Coverage**: > 90%

### **Development Velocity Metrics**
- **Feature Development Time**: 30% faster with good architecture
- **Bug Fix Time**: 50% faster with clean code
- **Onboarding Time**: 60% faster with clear patterns
- **Code Review Time**: 40% faster with consistent principles

---

**AUTHORITY LEVEL**: üî¥ **SUPREME AUTHORITY - ARCHITECTURAL FOUNDATION**  
**ENFORCEMENT STATUS**: üîí **ACTIVE AND ENFORCING - ZERO COMPROMISE**  
**SCOPE**: Universal application across all programming languages, frameworks, and project types
